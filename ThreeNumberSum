# Exploring Arrays : ThreeNumberSum

Today, we dive into the fascinating world of arrays and uncover one of their most captivating mysteries in arrays. Get ready to embark on an adventure that will challenge your mind and leave you with newfound insights into the power of arrays!

## Introduction to Arrays

An array is a collection of elements, each identified by an index or a key. The elements are stored in contiguous memory locations.

- **Fixed Size:** Arrays have a fixed size, meaning you must specify the number of elements it can hold when it is declared.
- **Homogeneous Elements:** All elements in an array must be of the same data type (e.g., integers, floating-point numbers, characters).

Arrays are widely used in programming for various operations such as traversal ,Search ,Insertion , Deletion , Sorting , Merging etc.

**Advantages:**

- **Random Access:** Elements can be accessed directly using their indices, providing constant-time access.
- **Memory Efficiency:** Contiguous memory allocation allows for efficient memory usage.

## ThreeNumberSum

The "Three Number Sum" problem is a well-known algorithmic problem that involves finding all unique triplets in an array whose sum equals a given target value. This problem is a variation of the more general "k-Sum" problem, where you are tasked with finding combinations of k elements that add up to a specific target.

### **Key Components:**

1. **Array of Integers:**
    - The input is an array of integers, and the algorithm aims to find three numbers within this array.
2. **Target Sum:**
    - The target sum is the value that the sum of the chosen triplet should equal.
3. **Unique Triplets:**
    - The solution should provide all unique triplets that satisfy the condition. Duplicate triplets should be avoided.

## Overview of Arrays

Arrays are declared by specifying the data type of their elements and the array's name. The syntax varies among programming languages.

Arrays are declared by specifying the data type of their elements and the array's name. The syntax varies among programming languages.

Individual elements are accessed using square brackets and the index.

Arrays support various operations, including reading, writing, searching, and sorting elements. The efficiency of these operations often depends on the programming language and the underlying implementation.

Arrays can have more than one dimension. For example, a 2D array is like a table with rows and columns.

## Code

```python
#  Copyrights to venkys.io
#  For more programs visit venkys.io 
#  Python program for Three Number Sum

# Twopointer Approach

def VSDthreesum(n,arr,target):
    ans=[]
    arr.sort()
    for i in range(n-2):
        if (i==0 or (i>0 and arr[i]!=arr[i-1])):
            low=i+1
            high=n-1
            s=target-arr[i]
            while(low<high):
                if arr[low]+arr[high]==s:
                    ans.append([arr[i],arr[low],arr[high]])
                    while(low<high and arr[low]==arr[low+1]):
                        low+=1
                    while(low<high and arr[high]==arr[high-1]):
                        high-=1
                    low+=1
                    high-=1
                elif (arr[low]+arr[high])<s:
                    low+=1
                else:
                    high-=1
    if len(ans)>0:
        print("Resultant Triplets are: ",*ans)           
    else:
        print("No triplets")

if __name__=="__main__":
    n=10
    arr=[1,2,3,4,5,6,7,8,9,10]
    target=9
    VSDthreesum(n,arr,target
```

## Explanation

Now we have the basic understanding of arrays and the concept of ThreeNumberSum.

Let’s dive into the step-by-step process of ThreeNumberSum.

1. **Sort the Array:**
    - In the first step he input array ‘arr’ is sorted in ascending order using the sort() method. Sorting is a crucial step for the two-pointer approach to work efficiently
2. **Main Function:**
    - In this step the function ‘VSDthreesum’ takes three parameters: n (length of the array), arr (the array of integers), and target (the target sum).
3. **Initialize an Empty List (ans):**
    - In this step the variable ans is initialized as an empty list. This list will store the resultant triplets.
4. **Loop Over the Array (for i in range(n-2)):**
    - In this step, we iterate over the array from the first element to the third-to-last element. This ensures that we have enough remaining elements to form a triplet.
5. **Check for Duplicates (if (i==0 or (i>0 and arr[i]!=arr[i-1]))):**
    - We check if the current element is the first element or if it is not equal to the previous element. This avoids considering duplicate triplets.
6. **Initialize Pointers (low=i+1, high=n-1):**
    - We initialize two pointers, low and high, which represent the positions of the leftmost and rightmost elements of the remaining subarray.
7. **Calculate the Target Sum (s=target-arr[i]):**
    - We calculate the target sum by subtracting the current element (arr[i]) from the target sum (target).
8. **Two-Pointer Approach (while (low<high)):**
    - We use a two-pointer approach to find pairs of elements that sum up to the target sum. The low pointer starts from the element next to the current element, and the high pointer starts from the last element of the array.
9. **Check the Sum (if arr[low]+arr[high]==s):**
    - We check if the sum of the elements at the current positions of the low and high pointers equals the target sum. If it does, we have found a triplet. We add it to the ans list and move both pointers towards the center.
10. **Avoid Duplicate Elements (while (low<high and arr[low]==arr[low+1]) and while (low<high and arr[high]==arr[high-1])):**
    - We avoid considering duplicate elements by moving the low pointer to the next different element and the high pointer to the previous different element.
11. **Move Pointers (low+=1, high-=1):**
    - After avoiding duplicate elements, we move the low pointer to the next position and the high pointer to the previous position.
12. **Print Result (if len(ans)>0):**
    - Finally, we check if the ans list contains any triplets. If it does, we print the resultant triplets. Otherwise, we print "No triplets".

```java
// Copyrights to venkys.io
// For more programs visit venkys.io 
// Java program for ThreeNumberSum

import java.util.ArrayList;
import java.util.Arrays;

public class Main{
    static ArrayList < ArrayList < Integer >> threeSum(int[] arr,int target){
        Arrays.sort(arr);
        ArrayList < ArrayList < Integer >> res = new ArrayList<>();
        for(int i=0;i<arr.length-2;i++){
            if(i==0 || (i>0 && arr[i] != arr[i-1] )){
                int low=i+1,high=arr.length-1,sum=target-arr[i];
                while(low<high){
                    if(arr[low]+arr[high]==sum){
                        ArrayList<Integer> temp = new ArrayList<>();
                        temp.add(arr[i]);
                        temp.add(arr[low]);
                        temp.add(arr[high]);
                        res.add(temp);
                        
                        while(low<high && arr[low] == arr[low+1])low++;
                        while(low<high && arr[high]==arr[high-1])high--;

                        low++;
                        high--;
                    }
                    else if (arr[low]+arr[high]<sum)low++;
                    else high--;
                }
            }
        }
        return res;
    }
    public static void main(String[] args) {
        int arr[]={-1,0,1,2,-1,-4};
        ArrayList < ArrayList < Integer >> ans;
        int target=0;
        ans = threeSum(arr,target);
        System.out.println("The triplets are :");
        for (int i = 0; i < ans.size(); i++) {
            for (int j = 0; j < ans.get(i).size(); j++) {
                System.out.print(ans.get(i).get(j) + " ");
            }
            System.out.println();
        }

    }
}
```

## Explanation

1. **Sort the Array:**
    - The input array arr is sorted using ‘Arrays.sort(arr)’ in ascending order.
2. **threeSum Function:**
    
    The function threesum takes the array and the target sum as parameters and returns an ArrayList of ArrayLists.
    
3. **Loop Over the Array:**
    
    The loop runs from 0 to (arr.lenght - 2) to ensure enough elements for a triplet.
    
4. **Skip Duplicates:**
    - Duplicates are skipped to avoid duplicate triplets.
5. **Initialize Two Pointers (low and high):**
    - The pointers low and high are initialized to explore the array from the next element (i + 1) and the last element, respectively.
6. **Calculate the Target Sum (sum = target - arr[i]):**
    - The variable sum is set to the target sum minus the current element.
7. **Two-Pointer Technique (while(low<high):):**
    - Use a while loop to iterate through the array with two pointers, low and high, moving towards each other.
8. **Check Triplet Sum:**
    - If the sum of the triplet equals the target sum, add the triplet to the result.
9. **Skip Duplicates and Move Pointers (low++ and high- -):**
    - Adjust the pointers to explore more solutions while avoiding duplicates.
10. **Main Block (main method):**
    - The main block initializes an array arr and a target sum target, then calls the threesum function with these parameters.
11. **Print Result:**
    - The resultant triplets are printed in the main method.
    

```cpp
// Copyrights to venkys.io
// For more programs visit venkys.io 
// CPP program for ThreeNumberSum

#include<iostream>
#include<bits/stdc++.h>
using namespace std;

 vector<vector<int>> threeSum(vector<int>& arr,int target) {
        vector<vector<int>> res; 
        
        sort(arr.begin(), arr.end()); 

        for (int i = 0; i < (int)(arr.size())-2; i++) {
            
            if (i == 0 || (i > 0 && arr[i] != arr[i-1])) {
                
                int low = i+1, high = (int)(arr.size())-1, sum = target - arr[i];
                
                while (low < high) {
                    if (arr[low] + arr[high] == sum) {
                        
                        vector<int> temp; 
                        temp.push_back(arr[i]); 
                        temp.push_back(arr[low]); 
                        temp.push_back(arr[high]); 
                        res.push_back(temp);
                        
                        while (low < high && arr[low] == arr[low+1]) low++;
                        while (low < high && arr[high] == arr[high-1]) high--;
                        
                        low++; high--;
                    } 
                    else if (arr[low] + arr[high] < sum) low++;
                    else high--;
               }
            }
        }
        return res;
    }
int main() {
  vector < int > arr{-1,0,1,2,-1,-4};
  int target=0;
  vector < vector < int >> ans;
  ans = threeSum(arr,target);
  cout << "The triplets are : "<< endl;
  for (int i = 0; i < ans.size(); i++) {
    for (int j = 0; j < ans[i].size(); j++) {
      cout << ans[i][j] <<" ";
    }
    cout << endl;
  }
  return 0;
}
```

## Explanation

1. **Include Necessary Headers:**
    - The program includes the necessary headers, including <iostream> and <bits/stdc++.h>.
2. **threeSum Function:**
    - The threesum function takes a vector arr and an integer target as parameters and returns a vector of vectors.
3. **Sort the Array:**
    - The input vector arr is sorted in ascending order using sort(arr.begin() , arr.end()).
4. **Loop Over the Array:**
    - The loop runs from 0 to ((int)(array(size)) - 2) to ensure enough elements for a triplet.
5. **Skip Duplicates:**
    - Duplicates are skipped to avoid duplicate triplets.
6. **Initialize Two Pointers (low and high):**
    - The pointers low and high are initialized to explore the vector from the next element (i + 1) and the last element, respectively.
7. **Calculate the Target Sum (sum= target - arr[i]):**
    - The variable sum is set to the target sum minus the current element.
8. **Two-Pointer Technique (while(low<high):):**
    - Use a while loop to iterate through the vector with two pointers, low and high, moving towards each other.
9. **Check Triplet Sum:**
    - If the sum of the triplet equals the target sum, add the triplet to the result.
10. **Skip Duplicates and Move Pointers (low++ and high- -):**
    - Adjust the pointers to explore more solutions while avoiding duplicates.
11. **Main Block (main function):**
    - The main block initializes a vector arr and a target sum target, then calls the threesum function with these parameters.
12. **Print Result:**
    - The resultant triplets are printed in the main function.

## Time Complexities and Space Complexities

### **Time Complexity:**

The dominant factor in the time complexity is typically the sorting step. Let *n* be the length of the input array.

1. **Sorting:**
    - The sorting step takes *O*(*n*log*n*) time using algorithms like quicksort or mergesort.
2. **Two-Pointer Technique:**
    - The two-pointer technique involves a linear pass through the sorted array, which takes *O*(*n*) time.
3. **Total Time Complexity:**
    - The overall time complexity is *O*(*n*log*n*)+*O*(*n*)=*O*(*n*log*n*).

### **Space Complexity:**

1. **Sorting:**
    - The sorting step is typically an in-place operation, so it doesn't contribute to the space complexity.
2. **Other Variables:**
    - The additional space used for variables like pointers and temporary arrays is constant, *O*(1).
3. **Resultant Triplets:**
    - The space needed to store the resultant triplets is *O*(*m*), where *m* is the number of valid triplets.
4. **Total Space Complexity:**
    - The overall space complexity is *O*(1)+*O*(*m*)=*O*(*m*).
        
        

## Real World Applications

The ThreeNumberSum algorithm can be used in various real-world applications. For example, it can be applied in the field of finance to find three numbers in an array that add up to a specific target value, which can help identify investment opportunities or analyze market trends. Additionally, this algorithm can be used in data analysis to find combinations of three variables tha
t satisfy certain conditions, aiding in the discovery of patterns or correlations.

The ThreeNumberSum algorithm can also be used in the field of computational biology to identify gene networks or protein interactions. By finding three genes or proteins that interact with each other, researchers can gain insights into the underlying mechanisms of diseases or biological processes. Furthermore, this algorithm can be applied in social network analysis to identify groups of three individuals with strong connections, which can help in understanding social dynamics and influence patterns. Overall, the ThreeNumberSum algorithm has versatile applications across different domains.
